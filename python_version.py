# -*- coding: utf-8 -*-
"""weather_machine_learning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-iTTQSU-sAUobS0qO2_S4Aiyn_WwSaEV

# Weather Machine Learning Project

## Overview

This project involves analyzing and predicting weather data using machine learning techniques. The dataset contains daily weather observations in Fahrenheit. The goal is to build a predictive model to estimate the maximum temperature for the following day based on historical data.

## Data Description

The dataset, `local_weather.csv`, contains daily weather records collected from the New Orleans Airport station with the following columns:
- `PRCP`: Precipitation (in tenths of mm)
- `SNOW`: Snowfall (in tenths of mm)
- `SNWD`: Snow depth (in mm)
- `TMAX`: Maximum temperature (in tenths of degrees Fahrenheit)
- `TMIN`: Minimum temperature (in tenths of degrees Fahrenheit)

### Station Details
- **Name**: New Orleans Airport, LA US
- **Network ID**: GHCND:USW00012916
- **Latitude/Longitude**: 29.99755°, -90.27772°
- **Elevation**: -1 m

## Steps in the Project

1. **Data Loading and Preparation**
   - Load the dataset using pandas.
   - Inspect and clean the data by handling missing values.
   - Convert data types as needed and address any anomalies (e.g., unrealistic values).

2. **Exploratory Data Analysis (EDA)**
   - Plot temperature trends and precipitation data.
   - Aggregate and visualize annual and monthly precipitation totals.
   - Analyze the correlation between features and the target variable.

3. **Feature Engineering**
   - Generate rolling mean features for temperature.
   - Compute new features like the temperature range and logarithm of precipitation.
   - Evaluate the impact of these features on model performance.

4. **Model Training and Evaluation**
   - Train a Ridge regression model to predict the maximum temperature for the following day.
   - Evaluate model performance using Mean Absolute Error (MAE).
   - Compare the Ridge regression model with more advanced models like Random Forests.

5. **Prediction and Results**
   - Use the best-performing model to predict the maximum temperature for the next day.
   - Analyze model predictions and errors to improve forecasting accuracy.

## Key Features Added

- **Rolling Means**: To capture trends in temperature over a 30-day window.
- **Temperature Range**: Difference between maximum and minimum temperatures.
- **Log Transformation**: Applied to precipitation to handle skewed distributions.

## How to Use

1. **Setup**: Ensure you have the required libraries installed:
   - `pandas`
   - `numpy`
   - `sklearn`

2. **Run the Notebook**: Execute the notebook cells sequentially to:
   - Load and clean the data.
   - Train and evaluate models.
   - Make future temperature predictions.

3. **Prediction for Tomorrow**: The function `predict_tomorrow` can be used to forecast the maximum temperature for the next day based on the latest available data.

## Results

The project demonstrates various methods for predicting weather data, including:
- Feature selection and engineering to improve model performance.
- Comparing different machine learning models to identify the best approach.


## Acknowledgments

This project is based on data collected from the New Orleans Airport weather station. Special thanks to the Global Historical Climatology Network (GHCN) for providing the weather data.

# Reading the data into pandas
"""

import pandas as pd

weather = pd.read_csv("local_weather.csv", index_col="DATE")

print(weather)

"""#Preparing the data for machine learning"""

weather.apply(pd.isnull).sum()/weather.shape[0]

core_weather = weather[["PRCP", "SNOW", "SNWD", "TMAX", "TMIN"]].copy()

core_weather.columns = ["precip", "snow", "snow_depth", "temp_max", "temp_min"]

print(core_weather)

"""#Filling in missing values"""

core_weather.apply(pd.isnull).sum()/core_weather.shape[0]

core_weather["snow"].value_counts()

del core_weather["snow"]

core_weather["snow_depth"].value_counts()

del core_weather["snow_depth"]

print(core_weather[pd.isnull(core_weather["precip"])])

core_weather["precip"].value_counts()

core_weather["precip"] = core_weather["precip"].fillna(0)

print(core_weather[pd.isnull(core_weather["temp_max"])])

core_weather = core_weather.ffill()

core_weather.apply(pd.isnull).sum()/core_weather.shape[0]

"""# Verifying we have the correct data types"""

print(core_weather.dtypes)

print(core_weather.index)

core_weather.index = pd.to_datetime(core_weather.index)

print(core_weather.index)

core_weather.apply(lambda x: (x==9999).sum())

"""#Analyzing our weather data"""

core_weather[["temp_max", "temp_min"]].plot()

pd.set_option('display.max_rows', None)
pd.set_option('display.max_columns', None)
core_weather.index.year.value_counts().sort_index()

core_weather['precip'].plot()

print(core_weather.groupby(core_weather.index.year).sum()["precip"])

"""# Training the machine learning model"""

core_weather["target"] = core_weather.shift(-1)["temp_max"]

pd.reset_option('display.max_rows')
pd.reset_option('display.max_columns')

print(core_weather)

core_weather = core_weather.iloc[:-1,:].copy()

print(core_weather)

from sklearn.linear_model import Ridge

reg = Ridge(alpha=.1)

predictors = ["precip", "temp_max", "temp_min"]

train = core_weather.loc[:"2022-12-31"]

test = core_weather.loc["2023-01-01":]

reg.fit(train[predictors], train["target"])

predictions = reg.predict(test[predictors])

from sklearn.metrics import mean_absolute_error

mean_absolute_error(test["target"], predictions)

"""# Evaluating the model"""

combined = pd.concat([test["target"], pd.Series(predictions, index = test.index)], axis=1)
combined.columns = ["actual", "predictions"]

print(combined)

combined.plot()

print(reg.coef_)

"""# Creating a function to make predictions"""

def create_predictions(predictors, core_weather, reg):
  train = core_weather.loc[:"2022-12-31"]
  test = core_weather.loc["2023-01-01":]
  reg.fit(train[predictors], train["target"])
  predictions = reg.predict(test[predictors])
  error = mean_absolute_error(test["target"], predictions)
  combined = pd.concat([test["target"], pd.Series(predictions, index = test.index)], axis=1)
  combined.columns = ["actual", "predictions"]
  return error, combined

"""# Adding in rolling means"""

core_weather["month_max"] = core_weather["temp_max"].rolling(30).mean()

print(core_weather)

core_weather["month_day_max"] = core_weather["month_max"] / core_weather["temp_max"]

core_weather["max_min"] = core_weather["temp_max"] / core_weather["temp_min"]

predictors = ["precip", "temp_max", "temp_min", "month_max", "month_day_max", "max_min"]

core_weather = core_weather.iloc[30:,:].copy()

error, combined = create_predictions(predictors, core_weather, reg)

print(error)

combined.plot()

"""# Adding in monthly and daily averages"""

core_weather['monthly_avg'] = core_weather["temp_max"].groupby(core_weather.index.month).transform('mean')

print(core_weather)

core_weather["day_of_year_avg"] = core_weather["temp_max"].groupby(core_weather.index.day_of_year).transform('mean')

predictors = ["precip", "temp_max", "temp_min", "month_max", "month_day_max", "max_min", "day_of_year_avg", "monthly_avg"]

error, combined = create_predictions(predictors, core_weather, reg)

print(error)

print(reg.coef_)

print(core_weather.corr()["target"])

"""we got worse results"""

predictors = ["precip", "temp_max", "temp_min", "month_max", "month_day_max", "max_min"]
error, combined = create_predictions(predictors, core_weather, reg)
print(error)

"""# Analysis of the largest model errors

"""

combined["diff"] = combined["actual"] - combined["predictions"].abs()

combined.sort_values("diff", ascending=False).head()

"""# Feature Selection Optimization"""

import numpy as np
core_weather["temp_range"] = core_weather["temp_max"] - core_weather["temp_min"]
core_weather["log_precip"] = core_weather["precip"].apply(lambda x: np.log(x + 1))

predictors = ["precip", "temp_max", "temp_min", "month_max", "month_day_max", "max_min", "temp_range", "log_precip"]

error, combined = create_predictions(predictors, core_weather, reg)
print(f"MAE after adding new features: {error}")

"""better results

# Using more advanced models
"""

from sklearn.ensemble import RandomForestRegressor

#Random Forest
rf = RandomForestRegressor(n_estimators=100, random_state=42)
error, combined = create_predictions(predictors, core_weather, rf)
print(f"MAE with RandomForest: {error}")

"""worse results

#Adding predictions for tomorrow
"""

def predict_tomorrow(predictors, core_weather, reg):
    train = core_weather.loc[:"2022-12-31"]
    test = core_weather.loc["2023-01-01":]
    reg.fit(train[predictors], train["target"])


    last_day = core_weather.iloc[-1][predictors].to_frame().T
    prediction = reg.predict(last_day)

    last_date = core_weather.index[-1]
    prediction_date = last_date + pd.Timedelta(days=1)

    return prediction_date, prediction[0]

prediction_date, tomorrow_prediction = predict_tomorrow(predictors, core_weather, reg)
print(f"Predicted max temperature for {prediction_date.date()}: {tomorrow_prediction}")